swagger: "2.0"
info:
  description: "API for Heaven-in-Mouth App"
  version: "1.0.0"
  title: "Heaven-in-Mouth API"
paths:
  /login:
    get:
      tags:
        - login
      summary: "Check if the user is logged in"
      responses:
        200:
          description: "User is logged in"
        401:
          description: "User is not logged in"
    post:
      tags:
        - login
      summary: "Login a user"
      parameters:
        - name: "body"
          in: "body"
          required: true
          schema:
            type: "object"
            properties:
              email:
                type: "string"
                example: "jan.kowalski@example.com"
              password:
                type: "string"
                example: "password123"
      responses:
        200:
          description: "Logged in successfully"
        400:
          description: "User is already logged in"
        401:
          description: "Incorrect login credentials"
        404:
          description: "User not found"
  /logout:
    get:
      tags:
        - logout
      summary: "Logout a user"
      responses:
        200:
          description: "Logged out successfully"
        401:
          description: "User is not logged in"
  /users:
    get:
      tags:
        - users
      summary: "Get all users"
      responses:
        200:
          description: "List of all users"
          schema:
            type: "array"
            items:
              $ref: "#/definitions/User"
    post:
      tags:
        - users
      summary: "Create a new user"
      parameters:
        - name: "body"
          in: "body"
          required: true
          schema:
            $ref: "#/definitions/UserInput"
      responses:
        201:
          description: "User created successfully"
        400:
          description: "User with the same email already exists"
  /users/{user_id}:
    get:
      tags:
        - users
      summary: "Get user details"
      parameters:
        - name: "user_id"
          in: "path"
          required: true
          type: "integer"
      responses:
        200:
          description: "User details"
          schema:
            $ref: "#/definitions/User"
        404:
          description: "User not found"
    put:
      tags:
        - users
      summary: "Update user data"
      parameters:
        - name: "user_id"
          in: "path"
          required: true
          type: "integer"
        - name: "body"
          in: "body"
          required: true
          schema:
            $ref: "#/definitions/UserInput"
      responses:
        200:
          description: "User data updated"
        404:
          description: "User not found"
    delete:
      tags:
        - users
      summary: "Delete user"
      parameters:
        - name: "user_id"
          in: "path"
          required: true
          type: "integer"
      responses:
        200:
          description: "User deleted"
        404:
          description: "User not found"
  /restaurants:
    get:
      tags:
        - restaurants
      summary: "Get all restaurants with basic information"
      responses:
        200:
          description: "List of all restaurants with basic information"
          schema:
            type: "array"
            items:
              type: "object"
              properties:
                restaurant_id:
                  type: "integer"
                  example: 1
                name:
                  type: "string"
                  example: "The Great Restaurant"
                address:
                  type: "string"
                  example: "123 Culinary Street, Food City"
                phone:
                  type: "string"
                  example: "123456789"
    post:
      tags:
        - restaurants
      summary: "Create a new restaurant"
      parameters:
        - name: "body"
          in: "body"
          required: true
          schema:
            $ref: "#/definitions/RestaurantInput"
      responses:
        201:
          description: "Restaurant created successfully"
        400:
          description: "Invalid input data"
  /restaurants/{restaurant_id}:
    get:
      tags:
        - restaurants
      summary: "Get detailed information about a specific restaurant"
      parameters:
        - name: "restaurant_id"
          in: "path"
          required: true
          type: "integer"
      responses:
        200:
          description: "Detailed information about the restaurant"
          schema:
            $ref: "#/definitions/Restaurant"
        404:
          description: "Restaurant not found"
    put:
      tags:
        - restaurants
      summary: "Update restaurant data"
      parameters:
        - name: "restaurant_id"
          in: "path"
          required: true
          type: "integer"
        - name: "body"
          in: "body"
          required: true
          schema:
            $ref: "#/definitions/RestaurantInput"
      responses:
        200:
          description: "Restaurant data updated"
        404:
          description: "Restaurant not found"
    delete:
      tags:
        - restaurants
      summary: "Delete a restaurant"
      parameters:
        - name: "restaurant_id"
          in: "path"
          required: true
          type: "integer"
      responses:
        200:
          description: "Restaurant deleted"
        404:
          description: "Restaurant not found"
  /restaurants/{restaurant_id}/menu:
    post:
      tags:
        - menu
      summary: "Create a new menu for a specific restaurant"
      parameters:
        - name: "restaurant_id"
          in: "path"
          required: true
          type: "integer"
        - name: "body"
          in: "body"
          required: true
          schema:
            $ref: "#/definitions/MenuInput"
      responses:
        201:
          description: "Menu created successfully"
        400:
          description: "Invalid input data"
  /menus/{menu_id}:
    get:
      tags:
        - menu
      summary: "Get details of a specific menu"
      parameters:
        - name: "menu_id"
          in: "path"
          required: true
          type: "integer"
      responses:
        200:
          description: "Menu details"
          schema:
            $ref: "#/definitions/Menu"
        404:
          description: "Menu not found"
    put:
      tags:
        - menu
      summary: "Update menu data"
      parameters:
        - name: "menu_id"
          in: "path"
          required: true
          type: "integer"
        - name: "body"
          in: "body"
          required: true
          schema:
            $ref: "#/definitions/MenuInput"
      responses:
        200:
          description: "Menu data updated"
        404:
          description: "Menu not found"
    delete:
      tags:
        - menu
      summary: "Delete a menu"
      parameters:
        - name: "menu_id"
          in: "path"
          required: true
          type: "integer"
      responses:
        200:
          description: "Menu deleted"
        404:
          description: "Menu not found"
  /menus/{menu_id}/dishes:
    post:
      tags:
        - dishes
      summary: "Create a new dish for a specific menu"
      parameters:
        - name: "menu_id"
          in: "path"
          required: true
          type: "integer"
        - name: "body"
          in: "body"
          required: true
          schema:
            $ref: "#/definitions/DishInput"
      responses:
        201:
          description: "Dish created successfully"
        400:
          description: "Invalid input data"
  /dishes/{dish_id}:
    get:
      tags:
        - dishes
      summary: "Get details of a specific dish"
      parameters:
        - name: "dish_id"
          in: "path"
          required: true
          type: "integer"
      responses:
        200:
          description: "Dish details"
          schema:
            $ref: "#/definitions/Dish"
        404:
          description: "Dish not found"
    put:
      tags:
        - dishes
      summary: "Update dish data"
      parameters:
        - name: "dish_id"
          in: "path"
          required: true
          type: "integer"
        - name: "body"
          in: "body"
          required: true
          schema:
            $ref: "#/definitions/DishInput"
      responses:
        200:
          description: "Dish data updated"
        404:
          description: "Dish not found"
    delete:
      tags:
        - dishes
      summary: "Delete a dish"
      parameters:
        - name: "dish_id"
          in: "path"
          required: true
          type: "integer"
      responses:
        200:
          description: "Dish deleted"
        404:
          description: "Dish not found"
  /dishes/{dish_id}/additives:
    post:
      tags:
        - additives
      summary: "Add a new additive to a specific dish"
      parameters:
        - name: "dish_id"
          in: "path"
          required: true
          type: "integer"
        - name: "body"
          in: "body"
          required: true
          schema:
            $ref: "#/definitions/AdditiveInput"
      responses:
        201:
          description: "Additive added successfully"
        400:
          description: "Invalid input data"
  /additives/{additive_id}:
    get:
      tags:
        - additives
      summary: "Get details of a specific additive"
      parameters:
        - name: "additive_id"
          in: "path"
          required: true
          type: "integer"
      responses:
        200:
          description: "Additive details"
          schema:
            $ref: "#/definitions/Additive"
        404:
          description: "Additive not found"
    put:
      tags:
        - additives
      summary: "Update additive data"
      parameters:
        - name: "additive_id"
          in: "path"
          required: true
          type: "integer"
        - name: "body"
          in: "body"
          required: true
          schema:
            $ref: "#/definitions/AdditiveInput"
      responses:
        200:
          description: "Additive data updated"
        404:
          description: "Additive not found"
    delete:
      tags:
        - additives
      summary: "Delete an additive"
      parameters:
        - name: "additive_id"
          in: "path"
          required: true
          type: "integer"
      responses:
        200:
          description: "Additive deleted"
        404:
          description: "Additive not found"
  /users/{user_id}/address:
    post:
      tags:
        - address
      summary: "Create a new address for a user"
      parameters:
        - name: "user_id"
          in: "path"
          required: true
          type: "integer"
        - name: "body"
          in: "body"
          required: true
          schema:
            $ref: "#/definitions/AddressInput"
      responses:
        201:
          description: "Address created successfully"
        400:
          description: "Invalid input data"
  /addresses/{address_id}:
    get:
      tags:
        - address
      summary: "Get details of a specific address"
      parameters:
        - name: "address_id"
          in: "path"
          required: true
          type: "integer"
      responses:
        200:
          description: "Address details"
          schema:
            $ref: "#/definitions/Address"
        404:
          description: "Address not found"
    put:
      tags:
        - address
      summary: "Update address data"
      parameters:
        - name: "address_id"
          in: "path"
          required: true
          type: "integer"
        - name: "body"
          in: "body"
          required: true
          schema:
            $ref: "#/definitions/AddressInput"
      responses:
        200:
          description: "Address data updated"
        404:
          description: "Address not found"
    delete:
      tags:
        - address
      summary: "Delete a specific address"
      parameters:
        - name: "address_id"
          in: "path"
          required: true
          type: "integer"
      responses:
        200:
          description: "Address deleted"
        404:
          description: "Address not found"
definitions:
  User:
    type: "object"
    properties:
      user_id:
        type: "integer"
        example: 1
      name:
        type: "string"
        example: "John Doe"
      email:
        type: "string"
        example: "john.doe@example.com"
      phone:
        type: "string"
        example: "+123456789"
  UserInput:
    type: "object"
    properties:
      name:
        type: "string"
        example: "John Doe"
      email:
        type: "string"
        example: "john.doe@example.com"
      password:
        type: "string"
        example: "password123"
      phone:
        type: "string"
        example: "+123456789"
  Restaurant:
    type: "object"
    properties:
      restaurant_id:
        type: "integer"
        example: 1
      name:
        type: "string"
        example: "The Great Restaurant"
      address:
        type: "string"
        example: "123 Culinary Street, Food City"
      phone:
        type: "string"
        example: "+123456789"
      menus:
        type: "array"
        items:
          $ref: "#/definitions/Menu"
  RestaurantInput:
    type: "object"
    properties:
      name:
        type: "string"
        example: "The Great Restaurant"
      address:
        type: "string"
        example: "123 Culinary Street, Food City"
      phone:
        type: "string"
        example: "+123456789"
  Menu:
    type: "object"
    properties:
      menu_id:
        type: "integer"
        example: 1
      restaurant_id:
        type: "integer"
        example: 1
      menu_name:
        type: "string"
        example: "Lunch Specials"
      dishes:
        type: "array"
        items:
          $ref: "#/definitions/Dish"
  MenuInput:
    type: "object"
    properties:
      restaurant_id:
        type: "integer"
        example: 1
      menu_name:
        type: "string"
        example: "Lunch Specials"
  Dish:
    type: "object"
    properties:
      dish_id:
        type: "integer"
        example: 1
      menu_id:
        type: "integer"
        example: 1
      dish_name:
        type: "string"
        example: "Chicken Salad"
      price:
        type: "number"
        format: "float"
        example: 12.99
      ingredients:
        type: "string"
        example: "Chicken, Lettuce, Tomato, Dressing"
      additives:
        type: "array"
        items:
          $ref: "#/definitions/Additive"
  DishInput:
    type: "object"
    properties:
      menu_id:
        type: "integer"
        example: 1
      dish_name:
        type: "string"
        example: "Chicken Salad"
      price:
        type: "number"
        format: "float"
        example: 12.99
      ingredients:
        type: "string"
        example: "Chicken, Lettuce, Tomato, Dressing"
  Additive:
    type: "object"
    properties:
      additive_id:
        type: "integer"
        example: 1
      dish_id:
        type: "integer"
        example: 1
      additive_name:
        type: "string"
        example: "Extra Dressing"
      price:
        type: "number"
        format: "float"
        example: 1.50
  AdditiveInput:
    type: "object"
    properties:
      dish_id:
        type: "integer"
        example: 1
      additive_name:
        type: "string"
        example: "Extra Dressing"
      price:
        type: "number"
        format: "float"
        example: 1.50
  Address:
    type: "object"
    properties:
      address_id:
        type: "integer"
        example: 1
      user_id:
        type: "integer"
        example: 1
      street:
        type: "string"
        example: "456 Maple Avenue"
      city:
        type: "string"
        example: "Food City"
      state:
        type: "string"
        example: "FC"
      zip_code:
        type: "string"
        example: "12345"
      country:
        type: "string"
        example: "Foodland"
  AddressInput:
    type: "object"
    properties:
      street:
        type: "string"
        example: "456 Maple Avenue"
      city:
        type: "string"
        example: "Food City"
      state:
        type: "string"
        example: "FC"
      zip_code:
        type: "string"
        example: "12345"
      country:
        type: "string"
        example: "Foodland"